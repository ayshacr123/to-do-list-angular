{"ast":null,"code":"import { Task } from 'src/app/model/task';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/crud.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction DashboardComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23)(2, \"div\", 24)(3, \"div\", 25);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_16_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.call(task_r1));\n    });\n    i0.ɵɵtext(6, \"e\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_16_Template_div_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteTask(task_r1));\n    });\n    i0.ɵɵtext(8, \"X\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", task_r1.task_name, \" \");\n  }\n}\nexport class DashboardComponent {\n  constructor(crudService) {\n    this.crudService = crudService;\n    this.taskObj = new Task();\n    this.taskArr = [];\n    this.addTaskValue = '';\n    this.editTaskValue = '';\n  }\n  ngOnInit() {\n    this.editTaskValue = '';\n    this.addTaskValue = '';\n    this.taskObj = new Task();\n    this.taskArr = [];\n    this.getAllTask();\n  }\n  getAllTask() {\n    this.crudService.getAllTask().subscribe(res => {\n      this.taskArr = res;\n    }, err => {\n      alert(\"Unable to get list of tasks\");\n    });\n  }\n  addTask() {\n    this.taskObj.task_name = this.addTaskValue;\n    this.crudService.addTask(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n      this.addTaskValue = '';\n    }, err => {\n      alert(err);\n    });\n  }\n  editTask() {\n    this.taskObj.task_name = this.editTaskValue;\n    this.crudService.editTask(this.taskObj).subscribe(res => {\n      this.ngOnInit();\n    }, err => {\n      alert(\"Failed to update task\");\n    });\n  }\n  deleteTask(etask) {\n    this.crudService.deleteTask(etask).subscribe(res => {\n      this.ngOnInit();\n    }, err => {\n      alert(\"Failed to delete task\");\n    });\n  }\n  call(etask) {\n    this.taskObj = etask;\n    this.editTaskValue = etask.task_name;\n  }\n}\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.CrudService));\n};\nDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"app-dashboard\"]],\n  decls: 30,\n  vars: 3,\n  consts: [[1, \"container-fluid\", \"bg-light\"], [1, \"container\", \"bg-light\"], [1, \"row\", \"mt-4\", 2, \"height\", \"500px\"], [1, \"col\"], [1, \"col-md-6\", \"bg-white\", \"shadow\"], [1, \"card\", \"bg-warning\", \"mt-4\"], [1, \"text-white\", \"p-3\", \"pt-2\", \"pb-2\"], [1, \"shadow\"], [1, \"input-group\", \"p-4\"], [\"type\", \"text\", \"placeholder\", \"Enter task \", \"name\", \"task\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"], [1, \"text-primary\", \"mt-4\"], [2, \"overflow-y\", \"auto\", \"height\", \"350px\"], [\"class\", \"m-3\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"exampleModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"exampleModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"exampleModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"modal-body\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"], [1, \"m-3\"], [\"id\", \"tasks\", 1, \"p-2\", \"shadow\", \"border\"], [1, \"input-group\", \"row\", \"ps-3\"], [1, \"card\", \"col-md-10\", \"border-0\"], [\"data-bs-toggle\", \"modal\", \"type\", \"button\", \"data-bs-target\", \"#exampleModal\", 1, \"btn\", \"btn-outline-primary\", \"col\", \"me-2\", 3, \"click\"], [1, \"btn\", \"btn-outline-danger\", \"col\", 3, \"click\"]],\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5)(6, \"h4\", 6);\n      i0.ɵɵtext(7, \"To Do App\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.addTaskValue = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_11_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(12, \"+\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"h4\", 11);\n      i0.ɵɵtext(14, \"Tasks : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 12);\n      i0.ɵɵtemplate(16, DashboardComponent_div_16_Template, 9, 1, \"div\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 14)(18, \"div\", 15)(19, \"div\", 16)(20, \"div\", 17)(21, \"h5\", 18);\n      i0.ɵɵtext(22, \"Edit Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"button\", 19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 20)(25, \"div\", 8)(26, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_26_listener($event) {\n        return ctx.editTaskValue = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 21);\n      i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_27_listener() {\n        return ctx.editTask();\n      });\n      i0.ɵɵtext(28, \"Update\");\n      i0.ɵɵelementEnd()()()()()()();\n      i0.ɵɵelement(29, \"div\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngModel\", ctx.addTaskValue);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taskArr);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngModel\", ctx.editTaskValue);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"#tasks[_ngcontent-%COMP%]:hover {\\r\\n    transform: scale(1.01);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50L2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHNCQUFzQjtBQUMxQiIsInNvdXJjZXNDb250ZW50IjpbIiN0YXNrczpob3ZlciB7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDEpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Task","i0","DashboardComponent","constructor","crudService","ngOnInit","editTaskValue","addTaskValue","taskObj","taskArr","getAllTask","subscribe","res","err","alert","addTask","task_name","editTask","deleteTask","etask","call","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\Downloads\\Angular Applications\\UST-To-Do-List\\UST-To-Do-List-main\\src\\app\\component\\dashboard\\dashboard.component.ts","C:\\Users\\Administrator\\Downloads\\Angular Applications\\UST-To-Do-List\\UST-To-Do-List-main\\src\\app\\component\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Task } from 'src/app/model/task';\r\nimport { CrudService } from 'src/app/service/crud.service';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  taskObj : Task = new Task();\r\n  taskArr : Task[] = [];\r\n\r\n  addTaskValue : string = '';\r\n  editTaskValue : string = '';\r\n\r\n  constructor(private crudService : CrudService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.editTaskValue = '';\r\n    this.addTaskValue = '';\r\n    this.taskObj = new Task();\r\n    this.taskArr = [];\r\n    this.getAllTask();\r\n  }\r\n  getAllTask() {\r\n    this.crudService.getAllTask().subscribe(res => {\r\n      this.taskArr = res;\r\n    }, err => {\r\n      alert(\"Unable to get list of tasks\");\r\n    });\r\n  }\r\n\r\n  addTask() {\r\n    this.taskObj.task_name = this.addTaskValue;\r\n    this.crudService.addTask(this.taskObj).subscribe(res => {\r\n      this.ngOnInit();\r\n      this.addTaskValue = '';\r\n    }, err => {\r\n      alert(err);\r\n    })\r\n  }\r\n\r\n  editTask() {\r\n    this.taskObj.task_name = this.editTaskValue;\r\n    this.crudService.editTask(this.taskObj).subscribe(res => {\r\n      this.ngOnInit();\r\n    }, err=> {\r\n      alert(\"Failed to update task\");\r\n    })\r\n  }\r\n\r\n  deleteTask(etask : Task) {\r\n    this.crudService.deleteTask(etask).subscribe(res => {\r\n      this.ngOnInit();\r\n    }, err=> {\r\n      alert(\"Failed to delete task\");\r\n    });\r\n  }\r\n\r\n  call(etask : Task) {\r\n    this.taskObj = etask;\r\n    this.editTaskValue = etask.task_name;\r\n  }\r\n\r\n\r\n}","<div class=\"container-fluid bg-light\">\r\n    <div class=\"container bg-light\">\r\n\r\n        <div class=\"row mt-4\" style=\"height: 500px;\">\r\n            <div class=\"col\"></div>\r\n            <div class=\"col-md-6 bg-white shadow\">\r\n\r\n                <div class=\"card bg-warning mt-4\">\r\n                    <h4 class=\"text-white p-3 pt-2 pb-2\">To Do App</h4>\r\n                </div>\r\n\r\n                <div class=\"shadow\">\r\n                    <div class=\"input-group p-4\">\r\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Enter task \" name=\"task\" [(ngModel)]=\"addTaskValue\">\r\n                        <button class=\"btn btn-outline-success\" type=\"button\" (click)=\"addTask()\">+</button>\r\n                      </div>\r\n                </div>\r\n\r\n                <h4 class=\"text-primary mt-4\">Tasks : </h4>\r\n\r\n                <div style=\"overflow-y: auto; height: 350px;\">\r\n                    <div class=\"m-3\" *ngFor=\"let task of taskArr\">\r\n                        <div class=\"p-2 shadow border\" id=\"tasks\" >\r\n                            <div class=\"input-group row ps-3\" >\r\n                                <div class=\"card col-md-10 border-0\"> {{task.task_name}} </div>\r\n                                <button class=\"btn btn-outline-primary col me-2\" data-bs-toggle=\"modal\" type=\"button\" data-bs-target=\"#exampleModal\" (click)=\"call(task)\" >e</button>\r\n                                <div class=\"btn btn-outline-danger col\" (click)=\"deleteTask(task)\" >X</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div class=\"modal-dialog\">\r\n                    <div class=\"modal-content\">\r\n                        <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Edit Task</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div class=\"modal-body\">\r\n                            <div class=\"input-group p-4\">\r\n                                <input type=\"text\" class=\"form-control\" placeholder=\"Enter task \" name=\"task\" [(ngModel)]=\"editTaskValue\">\r\n                                <button class=\"btn btn-outline-success\" type=\"button\" data-bs-dismiss=\"modal\" (click)=\"editTask()\">Update</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"col\"></div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}